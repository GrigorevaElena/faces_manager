package grigoreva.facesmanager.data.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import grigoreva.facesmanager.data.greendao.PersonPhoto;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON_PHOTO".
*/
public class PersonPhotoDao extends AbstractDao<PersonPhoto, Long> {

    public static final String TABLENAME = "PERSON_PHOTO";

    /**
     * Properties of entity PersonPhoto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PhotoUrl = new Property(1, String.class, "photoUrl", false, "PHOTO_URL");
        public final static Property FaceWidth = new Property(2, Float.class, "faceWidth", false, "FACE_WIDTH");
        public final static Property FaceHeight = new Property(3, Float.class, "faceHeight", false, "FACE_HEIGHT");
        public final static Property NormalFaceWidth = new Property(4, Float.class, "normalFaceWidth", false, "NORMAL_FACE_WIDTH");
        public final static Property NormalFaceHeight = new Property(5, Float.class, "normalFaceHeight", false, "NORMAL_FACE_HEIGHT");
        public final static Property AvgFaceColor = new Property(6, Integer.class, "avgFaceColor", false, "AVG_FACE_COLOR");
    };


    public PersonPhotoDao(DaoConfig config) {
        super(config);
    }
    
    public PersonPhotoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON_PHOTO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PHOTO_URL\" TEXT," + // 1: photoUrl
                "\"FACE_WIDTH\" REAL," + // 2: faceWidth
                "\"FACE_HEIGHT\" REAL," + // 3: faceHeight
                "\"NORMAL_FACE_WIDTH\" REAL," + // 4: normalFaceWidth
                "\"NORMAL_FACE_HEIGHT\" REAL," + // 5: normalFaceHeight
                "\"AVG_FACE_COLOR\" INTEGER);"); // 6: avgFaceColor
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON_PHOTO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PersonPhoto entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String photoUrl = entity.getPhotoUrl();
        if (photoUrl != null) {
            stmt.bindString(2, photoUrl);
        }
 
        Float faceWidth = entity.getFaceWidth();
        if (faceWidth != null) {
            stmt.bindDouble(3, faceWidth);
        }
 
        Float faceHeight = entity.getFaceHeight();
        if (faceHeight != null) {
            stmt.bindDouble(4, faceHeight);
        }
 
        Float normalFaceWidth = entity.getNormalFaceWidth();
        if (normalFaceWidth != null) {
            stmt.bindDouble(5, normalFaceWidth);
        }
 
        Float normalFaceHeight = entity.getNormalFaceHeight();
        if (normalFaceHeight != null) {
            stmt.bindDouble(6, normalFaceHeight);
        }
 
        Integer avgFaceColor = entity.getAvgFaceColor();
        if (avgFaceColor != null) {
            stmt.bindLong(7, avgFaceColor);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PersonPhoto readEntity(Cursor cursor, int offset) {
        PersonPhoto entity = new PersonPhoto( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // photoUrl
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // faceWidth
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // faceHeight
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // normalFaceWidth
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // normalFaceHeight
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // avgFaceColor
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PersonPhoto entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhotoUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFaceWidth(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setFaceHeight(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setNormalFaceWidth(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setNormalFaceHeight(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setAvgFaceColor(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PersonPhoto entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PersonPhoto entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
